$date
	Tue Apr 22 23:54:25 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module tb_adder_8bit $end
$var wire 8 ! Sum [7:0] $end
$var wire 1 " Cout $end
$var reg 8 # A [7:0] $end
$var reg 8 $ B [7:0] $end
$var reg 1 % Cin $end
$scope module uut $end
$var wire 8 & A [7:0] $end
$var wire 8 ' B [7:0] $end
$var wire 1 % Cin $end
$var wire 8 ( Sum [7:0] $end
$var wire 8 ) sum [7:0] $end
$var wire 8 * carry [7:0] $end
$var wire 1 " Cout $end
$scope begin full_adder_loop[0] $end
$var parameter 2 + i $end
$scope begin genblk1 $end
$scope module FA $end
$var wire 1 , a $end
$var wire 1 - b $end
$var wire 1 % cin $end
$var wire 1 . cout $end
$var wire 1 / sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin full_adder_loop[1] $end
$var parameter 2 0 i $end
$scope begin genblk1 $end
$scope module FA $end
$var wire 1 1 a $end
$var wire 1 2 b $end
$var wire 1 3 cin $end
$var wire 1 4 cout $end
$var wire 1 5 sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin full_adder_loop[2] $end
$var parameter 3 6 i $end
$scope begin genblk1 $end
$scope module FA $end
$var wire 1 7 a $end
$var wire 1 8 b $end
$var wire 1 9 cin $end
$var wire 1 : cout $end
$var wire 1 ; sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin full_adder_loop[3] $end
$var parameter 3 < i $end
$scope begin genblk1 $end
$scope module FA $end
$var wire 1 = a $end
$var wire 1 > b $end
$var wire 1 ? cin $end
$var wire 1 @ cout $end
$var wire 1 A sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin full_adder_loop[4] $end
$var parameter 4 B i $end
$scope begin genblk1 $end
$scope module FA $end
$var wire 1 C a $end
$var wire 1 D b $end
$var wire 1 E cin $end
$var wire 1 F cout $end
$var wire 1 G sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin full_adder_loop[5] $end
$var parameter 4 H i $end
$scope begin genblk1 $end
$scope module FA $end
$var wire 1 I a $end
$var wire 1 J b $end
$var wire 1 K cin $end
$var wire 1 L cout $end
$var wire 1 M sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin full_adder_loop[6] $end
$var parameter 4 N i $end
$scope begin genblk1 $end
$scope module FA $end
$var wire 1 O a $end
$var wire 1 P b $end
$var wire 1 Q cin $end
$var wire 1 R cout $end
$var wire 1 S sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin full_adder_loop[7] $end
$var parameter 4 T i $end
$scope begin genblk1 $end
$scope module FA $end
$var wire 1 U a $end
$var wire 1 V b $end
$var wire 1 W cin $end
$var wire 1 X cout $end
$var wire 1 Y sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b111 T
b110 N
b101 H
b100 B
b11 <
b10 6
b1 0
b0 +
$end
#0
$dumpvars
0Y
0X
0W
0V
0U
0S
0R
0Q
0P
0O
0M
0L
0K
0J
0I
1G
0F
1E
0D
0C
0A
1@
1?
0>
1=
0;
1:
19
08
17
05
14
13
02
11
0/
1.
1-
1,
b1111 *
b10000 )
b10000 (
b1 '
b1111 &
0%
b1 $
b1111 #
0"
b10000 !
$end
#10000
1"
1X
1W
1R
1Q
1L
0;
0A
19
1?
1E
1K
14
1:
1@
0G
b11111111 *
1F
0M
0S
0Y
b0 !
b0 (
b0 )
0/
12
18
1>
0,
01
07
0=
1C
1I
1O
1U
1%
b1111 $
b1111 '
b11110000 #
b11110000 &
#20000
1G
1M
1S
1Y
15
1;
1A
b11111110 !
b11111110 (
b11111110 )
0/
1D
1J
1P
1V
1,
11
17
1=
0%
b11111111 $
b11111111 '
b11111111 #
b11111111 &
#30000
0"
0X
0W
0R
0Q
0L
0K
0F
0E
0@
0?
0:
09
04
03
b0 *
0.
15
1A
1M
1Y
1/
1;
1G
b11111111 !
b11111111 (
b11111111 )
1S
02
0>
0J
0V
0,
07
0C
0O
b1010101 $
b1010101 '
b10101010 #
b10101010 &
#40000
